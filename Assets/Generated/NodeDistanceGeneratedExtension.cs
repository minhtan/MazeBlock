//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {

    public partial class Entity {

        public NodeDistance nodeDistance { get { return (NodeDistance)GetComponent(ComponentIds.NodeDistance); } }
        public bool hasNodeDistance { get { return HasComponent(ComponentIds.NodeDistance); } }

        public Entity AddNodeDistance(float newD, float newD2) {
            var component = CreateComponent<NodeDistance>(ComponentIds.NodeDistance);
            component.D = newD;
            component.D2 = newD2;
            return AddComponent(ComponentIds.NodeDistance, component);
        }

        public Entity ReplaceNodeDistance(float newD, float newD2) {
            var component = CreateComponent<NodeDistance>(ComponentIds.NodeDistance);
            component.D = newD;
            component.D2 = newD2;
            ReplaceComponent(ComponentIds.NodeDistance, component);
            return this;
        }

        public Entity RemoveNodeDistance() {
            return RemoveComponent(ComponentIds.NodeDistance);
        }
    }

    public partial class Pool {

        public Entity nodeDistanceEntity { get { return GetGroup(Matcher.NodeDistance).GetSingleEntity(); } }
        public NodeDistance nodeDistance { get { return nodeDistanceEntity.nodeDistance; } }
        public bool hasNodeDistance { get { return nodeDistanceEntity != null; } }

        public Entity SetNodeDistance(float newD, float newD2) {
            if(hasNodeDistance) {
                throw new EntitasException("Could not set nodeDistance!\n" + this + " already has an entity with NodeDistance!",
                    "You should check if the pool already has a nodeDistanceEntity before setting it or use pool.ReplaceNodeDistance().");
            }
            var entity = CreateEntity();
            entity.AddNodeDistance(newD, newD2);
            return entity;
        }

        public Entity ReplaceNodeDistance(float newD, float newD2) {
            var entity = nodeDistanceEntity;
            if(entity == null) {
                entity = SetNodeDistance(newD, newD2);
            } else {
                entity.ReplaceNodeDistance(newD, newD2);
            }

            return entity;
        }

        public void RemoveNodeDistance() {
            DestroyEntity(nodeDistanceEntity);
        }
    }

    public partial class Matcher {

        static IMatcher _matcherNodeDistance;

        public static IMatcher NodeDistance {
            get {
                if(_matcherNodeDistance == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.NodeDistance);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherNodeDistance = matcher;
                }

                return _matcherNodeDistance;
            }
        }
    }
}
