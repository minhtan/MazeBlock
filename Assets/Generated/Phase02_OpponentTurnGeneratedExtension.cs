//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {

    public partial class Entity {

        static readonly Phase02_OpponentTurn phase02_OpponentTurnComponent = new Phase02_OpponentTurn();

        public bool isPhase02_OpponentTurn {
            get { return HasComponent(ComponentIds.Phase02_OpponentTurn); }
            set {
                if(value != isPhase02_OpponentTurn) {
                    if(value) {
                        AddComponent(ComponentIds.Phase02_OpponentTurn, phase02_OpponentTurnComponent);
                    } else {
                        RemoveComponent(ComponentIds.Phase02_OpponentTurn);
                    }
                }
            }
        }

        public Entity IsPhase02_OpponentTurn(bool value) {
            isPhase02_OpponentTurn = value;
            return this;
        }
    }

    public partial class Pool {

        public Entity phase02_OpponentTurnEntity { get { return GetGroup(Matcher.Phase02_OpponentTurn).GetSingleEntity(); } }

        public bool isPhase02_OpponentTurn {
            get { return phase02_OpponentTurnEntity != null; }
            set {
                var entity = phase02_OpponentTurnEntity;
                if(value != (entity != null)) {
                    if(value) {
                        CreateEntity().isPhase02_OpponentTurn = true;
                    } else {
                        DestroyEntity(entity);
                    }
                }
            }
        }
    }

    public partial class Matcher {

        static IMatcher _matcherPhase02_OpponentTurn;

        public static IMatcher Phase02_OpponentTurn {
            get {
                if(_matcherPhase02_OpponentTurn == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.Phase02_OpponentTurn);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherPhase02_OpponentTurn = matcher;
                }

                return _matcherPhase02_OpponentTurn;
            }
        }
    }
}
