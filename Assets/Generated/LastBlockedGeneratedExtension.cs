//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {

    public partial class Entity {

        public LastBlocked lastBlocked { get { return (LastBlocked)GetComponent(ComponentIds.LastBlocked); } }
        public bool hasLastBlocked { get { return HasComponent(ComponentIds.LastBlocked); } }

        public Entity AddLastBlocked(Entitas.Entity newNode) {
            var component = CreateComponent<LastBlocked>(ComponentIds.LastBlocked);
            component.node = newNode;
            return AddComponent(ComponentIds.LastBlocked, component);
        }

        public Entity ReplaceLastBlocked(Entitas.Entity newNode) {
            var component = CreateComponent<LastBlocked>(ComponentIds.LastBlocked);
            component.node = newNode;
            ReplaceComponent(ComponentIds.LastBlocked, component);
            return this;
        }

        public Entity RemoveLastBlocked() {
            return RemoveComponent(ComponentIds.LastBlocked);
        }
    }

    public partial class Pool {

        public Entity lastBlockedEntity { get { return GetGroup(Matcher.LastBlocked).GetSingleEntity(); } }
        public LastBlocked lastBlocked { get { return lastBlockedEntity.lastBlocked; } }
        public bool hasLastBlocked { get { return lastBlockedEntity != null; } }

        public Entity SetLastBlocked(Entitas.Entity newNode) {
            if(hasLastBlocked) {
                throw new EntitasException("Could not set lastBlocked!\n" + this + " already has an entity with LastBlocked!",
                    "You should check if the pool already has a lastBlockedEntity before setting it or use pool.ReplaceLastBlocked().");
            }
            var entity = CreateEntity();
            entity.AddLastBlocked(newNode);
            return entity;
        }

        public Entity ReplaceLastBlocked(Entitas.Entity newNode) {
            var entity = lastBlockedEntity;
            if(entity == null) {
                entity = SetLastBlocked(newNode);
            } else {
                entity.ReplaceLastBlocked(newNode);
            }

            return entity;
        }

        public void RemoveLastBlocked() {
            DestroyEntity(lastBlockedEntity);
        }
    }

    public partial class Matcher {

        static IMatcher _matcherLastBlocked;

        public static IMatcher LastBlocked {
            get {
                if(_matcherLastBlocked == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.LastBlocked);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherLastBlocked = matcher;
                }

                return _matcherLastBlocked;
            }
        }
    }
}
