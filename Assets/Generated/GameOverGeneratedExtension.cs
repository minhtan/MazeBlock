//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {

    public partial class Entity {

        public GameOver gameOver { get { return (GameOver)GetComponent(ComponentIds.GameOver); } }
        public bool hasGameOver { get { return HasComponent(ComponentIds.GameOver); } }

        public Entity AddGameOver(Player newWinner) {
            var component = CreateComponent<GameOver>(ComponentIds.GameOver);
            component.winner = newWinner;
            return AddComponent(ComponentIds.GameOver, component);
        }

        public Entity ReplaceGameOver(Player newWinner) {
            var component = CreateComponent<GameOver>(ComponentIds.GameOver);
            component.winner = newWinner;
            ReplaceComponent(ComponentIds.GameOver, component);
            return this;
        }

        public Entity RemoveGameOver() {
            return RemoveComponent(ComponentIds.GameOver);
        }
    }

    public partial class Pool {

        public Entity gameOverEntity { get { return GetGroup(Matcher.GameOver).GetSingleEntity(); } }
        public GameOver gameOver { get { return gameOverEntity.gameOver; } }
        public bool hasGameOver { get { return gameOverEntity != null; } }

        public Entity SetGameOver(Player newWinner) {
            if(hasGameOver) {
                throw new EntitasException("Could not set gameOver!\n" + this + " already has an entity with GameOver!",
                    "You should check if the pool already has a gameOverEntity before setting it or use pool.ReplaceGameOver().");
            }
            var entity = CreateEntity();
            entity.AddGameOver(newWinner);
            return entity;
        }

        public Entity ReplaceGameOver(Player newWinner) {
            var entity = gameOverEntity;
            if(entity == null) {
                entity = SetGameOver(newWinner);
            } else {
                entity.ReplaceGameOver(newWinner);
            }

            return entity;
        }

        public void RemoveGameOver() {
            DestroyEntity(gameOverEntity);
        }
    }

    public partial class Matcher {

        static IMatcher _matcherGameOver;

        public static IMatcher GameOver {
            get {
                if(_matcherGameOver == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.GameOver);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherGameOver = matcher;
                }

                return _matcherGameOver;
            }
        }
    }
}
